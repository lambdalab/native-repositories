// Currently we only support mac and ubuntu out of the box, for other system, please run downloadDeps, and move the files
// in build/libs into $targetOsName

apply plugin: 'cpp'

import de.undercouch.gradle.tasks.download.Download

def createStandardLibrary(libs, libName) {
  createStandardLibrary(libs, libName, libName)
}

def createStandardLibrary(libs, libDir, libName) {
  libs.create(libName) {
    headers.srcDir "$targetOsName/$libDir/include"

    binaries.withType(StaticLibraryBinary) {
      File file = file("$targetOsName/$libDir/lib/lib${libName}.a")
      if (file.exists()) {
        staticLibraryFile = file
      }
    }
    binaries.withType(SharedLibraryBinary) {
      File file = file("$targetOsName/$libDir/lib/lib${libName}.dylib")
      if (file.exists()) {
        sharedLibraryFile = file
      }
    }
  }
}

model {
  repositories {
    libs(PrebuiltLibraries) { libs ->
      createStandardLibrary(libs, "gflags")  // 2.1.2

      createStandardLibrary(libs, "glog") // 0.3.4

      createStandardLibrary(libs, "re2") // 20150701

      createStandardLibrary(libs, "zlib", "z") // 1.2.8

      createStandardLibrary(libs, "thrift")  // 0.9.2

      createStandardLibrary(libs, "clang+llvm", "clang") // 3.6.2

      fileTree(dir: "$targetOsName/clang+llvm/lib", include: '**/*.a').each { file ->
        if (file.name != 'libclang.a') {
          def libName = file.name.substring(3, file.name.length() - 2)
          libs.create(libName) {
            binaries.withType(StaticLibraryBinary) {
              staticLibraryFile = file
            }
          }
        }
      }

      createStandardLibrary(libs, "boost")  // 1.58.0 Use abi linkage with this library

      fileTree(dir: "$targetOsName/boost/lib", include: '**/*.a').each { file ->
        def libName = file.name.substring(3, file.name.length() - 2)
        libs.create(libName) {
          binaries.withType(StaticLibraryBinary) {
            staticLibraryFile = file
          }
        }
      }
    }
  }
}

def downloadLLVM() {
  def destDir = "$targetOsName/clang+llvm"

  if (file(destDir).exists()) {
    return
  }

  buildDir.mkdir();
  file(targetOsName).mkdirs();

  def infix = "apple-darwin"
  if (targetOsName == "ubuntu")
    infix = "linux-gnu-ubuntu-14.04"
  else if (targetOsName == "suse")
    infix = "sles11.3-linux-gnu"
  def fileName = "clang+llvm-3.8.0-x86_64-${infix}"

  download {
    src "http://llvm.org/releases/3.8.0/${fileName}.tar.xz"
    dest "$buildDir"
    onlyIfNewer true
  }

  exec {
    executable "tar"
    args "xpvf", "$buildDir/${fileName}.tar.xz", "-C", "$buildDir"
  }
  exec {
    executable "mv"
    args "$buildDir/$fileName", "$destDir"
  }
}

task downloadSources() << {
  file("$buildDir/archive").mkdirs()
  [
    'https://github.com/gflags/gflags/archive/v2.1.2.zip',
    'https://github.com/google/glog/archive/v0.3.4.zip',
    'https://github.com/google/re2/archive/2015-08-01.zip',
    'http://zlib.net/zlib128.zip',
    'https://www.openssl.org/source/openssl-1.0.1q.tar.gz'
//    'http://apache.mesi.com.ar/thrift/0.9.2/thrift-0.9.2.tar.gz',
//    'http://iweb.dl.sourceforge.net/project/boost/boost/1.58.0/boost_1_58_0.zip',
  ].each { url ->
    download {
      src url
      dest "$buildDir/archive"
      onlyIfNewer true // not working for github zip file
      overwrite false
    }
  }
}

task prepareSources(dependsOn: downloadSources) << {
  file("$buildDir/source").mkdirs()
  fileTree(dir: "$buildDir/archive", includes: ['**/*.zip']).each { zipFile ->
    copy {
      from zipTree(zipFile)
      into "$buildDir/source"
    }
  }

  fileTree(dir: "$buildDir/archive", includes: ['**/*.gz']).each { zipFile ->
    copy {
      from tarTree(zipFile)
      into "$buildDir/source"
    }
  }
}

task buildSources(dependsOn: prepareSources) << {
  file("$buildDir/libs").mkdirs()
  String includePath = ""
  file("$buildDir/source").listFiles().each { dir ->
    if (!dir.isDirectory()) {
      return
    }

    int idx = dir.name.indexOf("-");
    if (idx == -1) {
      idx = dir.name.size()
    }
    def destDirName = dir.name.substring(0, idx)
    def destDir = file("$buildDir/libs/$destDirName")
    includePath = includePath + "$destDir/include:"
  }

  file("$buildDir/source").listFiles().each { dir ->
    if (!dir.isDirectory()) {
      return
    }

    println "\n" + dir + "\n"

    int idx = dir.name.indexOf("-");
    if (idx == -1) {
      idx = dir.name.size()
    }
    def destDirName = dir.name.substring(0, idx)
    def destDir = file("$targetOsName/$destDirName")
    def tmpDir = file("$buildDir/tmps/$destDirName")

    destDir.mkdir()
    tmpDir.mkdirs()

    if (file("$dir/CMakeLists.txt").exists()) {
      if (!file("$tmpDir/Makefile").exists()) {
        println("executing cmake")
        exec {
          executable "cmake"
          args dir, "-DCMAKE_INSTALL_PREFIX:PATH=$destDir"
          workingDir tmpDir
        }
      }

      exec {
        executable "make"
        args "install"
        workingDir tmpDir
        environment << ["CPLUS_INCLUDE_PATH": includePath]
      }
    } else {
      if (file("$dir/configure").exists() ) {
        if (!file("$dir/config.status").exists()) {
          exec {
            executable "$dir/configure"
            args "prefix=$destDir"
            workingDir dir
          }
        }
      }
      exec {
        executable "make"
        args  "prefix=$destDir", "--directory=$dir", "install"
        workingDir tmpDir
        environment << ["CPLUS_INCLUDE_PATH": includePath]
      }
    }
  }
}

afterEvaluate {
  downloadLLVM()
}